package de.hennig.moviearchive.userinterface;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.annotations.Theme;
import com.vaadin.data.Binder;
import com.vaadin.data.BindingValidationStatus;
import com.vaadin.data.BindingValidationStatus.Status;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.server.Responsive;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.AbstractTextField;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.declarative.Design;
import com.vaadin.ui.themes.ValoTheme;

import de.hennig.moviearchive.domain.Movie;

@Theme("valo")
public class HomeUI extends UI {

	private static final int WIDTH = 350;

	private final Binder<Movie> binder = new Binder<>();

	private static final String VALID = "valid";

	@Override
	protected void init(VaadinRequest request) {

		VerticalLayout layout = new VerticalLayout();
		layout.setWidth(100, Unit.PERCENTAGE);
		setContent(layout);

		TextField titleField = new TextField();
		addToLayout(layout, titleField, "Titel");

		binder.forField(titleField).asRequired("Titel darf nicht leer sein!")
				.withValidationStatusHandler(status -> commonStatusChangeHandler(status, titleField))
				.bind(Movie::getTitle, Movie::setTitle);

		layout.addComponent(createButton());

		titleField.focus();

		binder.setBean(new Movie());

	}

	private void addToLayout(Layout layout, AbstractTextField textField, String placeHolderText) {
		textField.setPlaceholder(placeHolderText);
		Label statusMessage = new Label();
		statusMessage.setVisible(false);
		statusMessage.addStyleName("validation-message");
		textField.setData(statusMessage);
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setSpacing(false);
		horizontalLayout.addComponent(textField);
		textField.setWidth(WIDTH, Unit.PIXELS);
		horizontalLayout.addComponent(statusMessage);
		layout.addComponent(horizontalLayout);
	}

	private Button createButton() {
		Button button = new Button("Film Speichern", event -> save());
		button.addStyleName(ValoTheme.BUTTON_PRIMARY);
		button.setWidth(WIDTH, Unit.PIXELS);
		return button;
	}

	private void commonStatusChangeHandler(BindingValidationStatus<?> event, AbstractTextField field) {
		Label statusLabel = (Label) field.getData();
		statusLabel.setVisible(!event.getStatus().equals(Status.UNRESOLVED));
		switch (event.getStatus()) {
		case OK:
			statusLabel.setValue("");
			statusLabel.setIcon(VaadinIcons.CHECK);
			statusLabel.getParent().addStyleName(VALID);
			break;
		case ERROR:
			statusLabel.setIcon(VaadinIcons.CLOSE);
			statusLabel.setValue(event.getMessage().orElse("Unknown error"));
			statusLabel.getParent().removeStyleName(VALID);
		default:
			break;
		}
	}

	private void save() {
		Movie movie = new Movie();
		if (binder.writeBeanIfValid(movie)) {
			Notification.show("Movie data saved successfully", String.format("title '%s'", movie.getTitle()),
					Type.HUMANIZED_MESSAGE);
		} else {
			Notification.show("Movie could not be saved, please check all fields", Type.ERROR_MESSAGE);
		}
	}
}
